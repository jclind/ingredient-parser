{"version":3,"file":"parse-ingredient.umd.js","sources":["../src/constants.ts","../src/utils.ts","../src/parseIngredient.ts"],"sourcesContent":["import { UnitOfMeasureDefinitions } from './types';\n\nexport const fors = ['For'];\nexport const forsRegEx = new RegExp(`^(?:${fors.join('|')})\\\\s`, 'i');\n\nexport const rangeSeparatorWords = ['or', 'to'];\nexport const rangeSeparatorRegEx = new RegExp(\n  `^(-|–|—|(?:${rangeSeparatorWords.join('|')})\\\\s)`,\n  'i'\n);\n\nexport const firstWordRegEx = /^(fl(?:uid)?(?:\\s+|-)(?:oz|ounces?)|\\w+[-.]?)(.+)/;\n\nexport const ofs = ['of'];\nexport const ofRegEx = new RegExp(`^(?:${ofs.join('|')})\\\\s+`, 'i');\n\nexport const unitsOfMeasure: UnitOfMeasureDefinitions = {\n  bag: { short: 'bag', plural: 'bags', alternates: [] },\n  box: { short: 'box', plural: 'boxes', alternates: [] },\n  bunch: { short: 'bunch', plural: 'bunches', alternates: [] },\n  can: { short: 'can', plural: 'cans', alternates: [] },\n  carton: { short: 'carton', plural: 'cartons', alternates: [] },\n  centimeter: { short: 'cm', plural: 'centimeters', alternates: ['cm.'] },\n  clove: { short: 'clove', plural: 'cloves', alternates: [] },\n  container: { short: 'container', plural: 'containers', alternates: [] },\n  cup: { short: 'c', plural: 'cups', alternates: ['c.', 'C'] },\n  dash: { short: 'dash', plural: 'dashes', alternates: [] },\n  drop: { short: 'drop', plural: 'drops', alternates: [] },\n  ear: { short: 'ear', plural: 'ears', alternates: [] },\n  'fluid ounce': { short: 'fl oz', plural: 'fluid ounces', alternates: ['fluidounce', 'floz', 'fl-oz', 'fluid-ounce', 'fluid-ounces', 'fluidounces', 'fl ounce', 'fl ounces', 'fl-ounce', 'fl-ounces', 'fluid oz', 'fluid-oz'] }, // prettier-ignore\n  foot: { short: 'ft', plural: 'feet', alternates: ['ft.'] },\n  gallon: { short: 'gal', plural: 'gallons', alternates: ['gal.'] },\n  gram: { short: 'g', plural: 'grams', alternates: ['g.'] },\n  head: { short: 'head', plural: 'heads', alternates: [] },\n  inch: { short: 'in', plural: 'inches', alternates: ['in.'] },\n  kilogram: { short: 'kg', plural: 'kilograms', alternates: ['kg.'] },\n  large: { short: 'lg', plural: 'large', alternates: ['lg', 'lg.'] },\n  liter: { short: 'l', plural: 'liters', alternates: [] },\n  medium: { short: 'md', plural: 'medium', alternates: ['med', 'med.', 'md.'] },\n  meter: { short: 'm', plural: 'meters', alternates: ['m.'] },\n  milligram: { short: 'mg', plural: 'milligrams', alternates: ['mg.'] },\n  milliliter: { short: 'ml', plural: 'milliliters', alternates: ['mL', 'ml.', 'mL.'] },\n  millimeter: { short: 'mm', plural: 'millimeters', alternates: ['mm.'] },\n  ounce: { short: 'oz', plural: 'ounces', alternates: ['oz.'] },\n  pack: { short: 'pack', plural: 'packs', alternates: [] },\n  package: { short: 'pkg', plural: 'packages', alternates: ['pkg.', 'pkgs'] },\n  piece: { short: 'piece', plural: 'pieces', alternates: ['pcs', 'pcs.'] },\n  pinch: { short: 'pinch', plural: 'pinches', alternates: [] },\n  pint: { short: 'pt', plural: 'pints', alternates: ['pt.'] },\n  pound: { short: 'lb', plural: 'pounds', alternates: ['lb.', 'lbs', 'lbs.'] },\n  quart: { short: 'qt', plural: 'quarts', alternates: ['qt.', 'qts', 'qts.'] },\n  small: { short: 'sm', plural: 'small', alternates: ['sm.'] },\n  sprig: { short: 'sprig', plural: 'sprigs', alternates: [] },\n  stick: { short: 'stick', plural: 'sticks', alternates: [] },\n  tablespoon: { short: 'tbsp', plural: 'tablespoons', alternates: ['tbsp.', 'T', 'Tbsp.'] },\n  teaspoon: { short: 'tsp', plural: 'teaspoons', alternates: ['tsp.', 't'] },\n  yard: { short: 'yd', plural: 'yards', alternates: ['yd.', 'yds.'] },\n};\n","/**\n * Removes falsy values from an array\n *\n * Originally from lodash: https://github.com/lodash/lodash/blob/4.17.15/lodash.js#L6874\n */\nexport const compactArray = <T>(array: T[]) => {\n  let index = -1;\n  const length = array.length;\n  let resIndex = 0;\n  const result: T[] = [];\n\n  while (++index < length) {\n    const value = array[index];\n    // istanbul ignore else\n    if (value) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n};\n","import numericQuantity from 'numeric-quantity';\nimport {\n  firstWordRegEx,\n  forsRegEx,\n  ofRegEx,\n  rangeSeparatorRegEx,\n  unitsOfMeasure,\n} from './constants';\nimport { Ingredient, ParseIngredientOptions } from './types';\nimport { compactArray } from './utils';\n\n/**\n * Parses a string into an array of recipe ingredient objects\n * @param ingText The ingredient text\n * @param options Configuration options\n */\nexport const parseIngredient = (\n  ingText: string,\n  options?: ParseIngredientOptions\n): Ingredient[] => {\n  const mergedUOMs = { ...unitsOfMeasure, ...options?.additionalUOMs };\n  const uomArray = Object.keys(mergedUOMs).map(uom => ({ id: uom, ...mergedUOMs[uom] }));\n\n  const arrRaw = compactArray(\n    ingText\n      .replace(/\\n{2,}/g, '\\n')\n      .split('\\n')\n      .map(ing => ing.trim())\n  );\n\n  const arrIngs = arrRaw.map(line => {\n    const oIng: Ingredient = {\n      quantity: null,\n      quantity2: null,\n      unitOfMeasureID: null,\n      unitOfMeasure: null,\n      description: '',\n      isGroupHeader: false,\n    };\n\n    // Check if the first character is numeric.\n    const nqResultFirstChar = numericQuantity(line.substring(0, 1));\n\n    if (isNaN(nqResultFirstChar)) {\n      // The first character is not numeric, so the entire line is the description.\n      oIng.description = line;\n\n      // If the line ends with \":\" or starts with \"For \", then it is assumed to be a group header.\n      if (/:$/.test(oIng.description) || forsRegEx.test(oIng.description)) {\n        oIng.isGroupHeader = true;\n      }\n    } else {\n      // The first character is numeric. See how many of the first seven\n      // constitute a single value. This will be `quantity`.\n      let lenNum = 6;\n      let nqResult = NaN;\n\n      while (lenNum > 0 && isNaN(nqResult)) {\n        nqResult = numericQuantity(line.substring(0, lenNum).trim());\n\n        if (nqResult > -1) {\n          oIng.quantity = nqResult;\n          oIng.description = line.substring(lenNum).trim();\n        }\n\n        lenNum--;\n      }\n    }\n\n    // Now check the description for a `quantity2` at the beginning.\n    // First we look for a dash, emdash, endash, \"to \", or \"or \" to\n    // indicate a range, then process the next seven characters just\n    // like we did for `quantity`.\n    const q2reMatch = rangeSeparatorRegEx.exec(oIng.description);\n    if (q2reMatch) {\n      const q2reMatchLen = q2reMatch[1].length;\n      const nqResultFirstChar = numericQuantity(\n        oIng.description.substring(q2reMatchLen).trim().substring(0, 1)\n      );\n\n      if (!isNaN(nqResultFirstChar)) {\n        let lenNum = 6;\n        let nqResult = NaN;\n\n        while (lenNum > 0 && isNaN(nqResult)) {\n          nqResult = numericQuantity(oIng.description.substring(q2reMatchLen, lenNum));\n\n          if (!isNaN(nqResult)) {\n            oIng.quantity2 = nqResult;\n            oIng.description = oIng.description.substring(lenNum).trim();\n          }\n\n          lenNum--;\n        }\n      }\n    }\n\n    // Check for a known unit of measure\n    const firstWordREMatches = firstWordRegEx.exec(oIng.description);\n\n    if (firstWordREMatches) {\n      const firstWord = firstWordREMatches[1].replace(/\\s+/g, ' ');\n      const remainingDesc = firstWordREMatches[2];\n      let uom = '';\n      let uomID = '';\n      let i = 0;\n\n      while (i < uomArray.length && !uom) {\n        const versions = [\n          ...uomArray[i].alternates,\n          uomArray[i].id,\n          uomArray[i].short,\n          uomArray[i].plural,\n        ];\n        if (versions.includes(firstWord)) {\n          uom = firstWord;\n          uomID = uomArray[i].id;\n        }\n        i++;\n      }\n\n      if (uom) {\n        oIng.unitOfMeasureID = uomID;\n        if (options?.normalizeUOM) {\n          oIng.unitOfMeasure = uomID;\n        } else {\n          oIng.unitOfMeasure = uom;\n        }\n        oIng.description = remainingDesc.trim();\n      }\n    }\n\n    if (!options?.allowLeadingOf && oIng.description.match(ofRegEx)) {\n      oIng.description = oIng.description.replace(ofRegEx, '');\n    }\n\n    return oIng;\n  });\n\n  return arrIngs;\n};\n"],"names":["numericQuantity","nqResultFirstChar"],"mappings":"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"}