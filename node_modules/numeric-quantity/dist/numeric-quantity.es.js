var VulgarFraction = /* @__PURE__ */ ((VulgarFraction2) => {
  VulgarFraction2["\xBC"] = "1/4";
  VulgarFraction2["\xBD"] = "1/2";
  VulgarFraction2["\xBE"] = "3/4";
  VulgarFraction2["\u2150"] = "1/7";
  VulgarFraction2["\u2151"] = "1/9";
  VulgarFraction2["\u2152"] = "1/10";
  VulgarFraction2["\u2153"] = "1/3";
  VulgarFraction2["\u2154"] = "2/3";
  VulgarFraction2["\u2155"] = "1/5";
  VulgarFraction2["\u2156"] = "2/5";
  VulgarFraction2["\u2157"] = "3/5";
  VulgarFraction2["\u2158"] = "4/5";
  VulgarFraction2["\u2159"] = "1/6";
  VulgarFraction2["\u215A"] = "5/6";
  VulgarFraction2["\u215B"] = "1/8";
  VulgarFraction2["\u215C"] = "3/8";
  VulgarFraction2["\u215D"] = "5/8";
  VulgarFraction2["\u215E"] = "7/8";
  return VulgarFraction2;
})(VulgarFraction || {});
function numericQuantity(qty) {
  const badResult = NaN;
  let finalResult = badResult;
  const vulgarFractionsRegex = /(¼|½|¾|⅐|⅑|⅒|⅓|⅔|⅕|⅖|⅗|⅘|⅙|⅚|⅛|⅜|⅝|⅞)/;
  const sQty = `${qty}`.replace(vulgarFractionsRegex, (_m, vf) => ` ${VulgarFraction[vf]}`).replace(/⁄/g, "/").trim();
  const re = /^(-)?\s*(\d*)(\.\d+|(\s+\d*\s*)?\s*\/\s*\d+)?$/;
  const ar = re.exec(sQty);
  if (!ar) {
    return badResult;
  }
  const [, dash, numberGroup1, numberGroup2] = ar;
  if (!numberGroup1 && !numberGroup2) {
    return badResult;
  }
  if (!numberGroup1 && numberGroup2 && numberGroup2.search(/^\./) !== -1) {
    finalResult = 0;
  } else {
    finalResult = parseInt(numberGroup1);
  }
  if (isNaN(finalResult)) {
    return badResult;
  }
  if (!numberGroup2) {
    return finalResult * (dash === "-" ? -1 : 1);
  }
  if (numberGroup2.search(/^\./) !== -1) {
    const numerator = parseFloat(numberGroup2);
    finalResult += Math.round(numerator * 1e3) / 1e3;
  } else if (numberGroup2.search(/^\s*\//) !== -1) {
    const numerator = parseInt(numberGroup1);
    const denominator = parseInt(numberGroup2.replace("/", ""));
    finalResult = Math.round(numerator * 1e3 / denominator) / 1e3;
  } else {
    const fractionArray = numberGroup2.split("/");
    const [numerator, denominator] = fractionArray.map((v) => parseInt(v));
    finalResult += Math.round(numerator * 1e3 / denominator) / 1e3;
  }
  return finalResult * (dash === "-" ? -1 : 1);
}
export { numericQuantity as default };
//# sourceMappingURL=numeric-quantity.es.js.map
